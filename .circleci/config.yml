version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@0.0.2
  aws-ecs: circleci/aws-ecs@0.0.10

references:

base_image: &base_image
              hashicorp/terraform:light

working_directory: &working_directory
                     ~/project

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc
    TERRAFORM_ENV: ~/project/

repo_cache_key: &repo_cache_key
                  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd && touch $BASH_ENV
      cd ~/project/terraform_setup
terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd ~/project/terraform_setup
      terraform init -backend-config="token=${TF_API_TOKEN}"
apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd ~/project/terraform_setup
          terraform init -backend-config="token=${TF_API_TOKEN}"
          terraform apply --auto-approve
jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform fmt
          command: |
            source $BASH_ENV
            cd ~/project/terraform_setup
            terraform init -backend-config="token=${TF_API_TOKEN}"
            terraform fmt
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd ~/project/terraform_setup
            terraform plan



  apply:
    <<: *apply_job
  apply-with-approval:
    <<: *apply_job


  destroy:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: "Destruction of env"
          command: |
            source $BASH_ENV
            cd ~/project/terraform_setup
            terraform destroy --auto-approve


workflows:
  version: 2
  build_plan_approve_apply:
    jobs:
      - build
      - plan:
          requires:
            - build
      - apply:
          requires:
            - plan
      - aws-ecr/build_and_push_image:
          requires:
            - apply
          account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          region: ${AWS_DEFAULT_REGION}
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build_and_push_image
          aws-region: ${AWS_DEFAULT_REGION}
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
          #verify-revision-is-deployed: true
          #post-steps:
          #  - run:
          #      name: Test the deployment
          #      command: |
          #        TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
          #        ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
          #        ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
          #        curl -s --retry 10 http://$ELB_DNS_NAME | grep "Welcome to nginx!"
      - hold:
          type: approval
          requires:
            #- aws-ecs/deploy-service-update
            - apply
      - destroy:
          requires:
            - hold